name: Build Application

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows/amd64
            output: proxy-manager-desktop.exe
          - os: macos-latest
            platform: darwin/amd64
            output: proxy-manager-desktop.app

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

    - name: Install Go dependencies
      run: go mod download

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Fix permissions (macOS/Linux)
      if: runner.os != 'Windows'
      run: |
        chmod -R +x frontend/node_modules/.bin/
        find frontend/node_modules/.bin -type f -exec chmod +x {} \;

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Build application
      run: wails build -platform ${{ matrix.platform }} -clean

    - name: List build outputs (Debug)
      run: |
        echo "=== Build outputs ==="
        ls -la build/bin/ || dir build\bin\

    - name: Package for release (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir release
        copy "build\bin\proxy-manager-desktop.exe" "release\proxy-manager-desktop-windows.exe"

    - name: Package for release (macOS)
      if: runner.os == 'macOS'
      run: |
        mkdir release
        cd build/bin
        zip -r ../../release/proxy-manager-desktop-macos.zip proxy-manager-desktop.app

    - name: List release files
      run: |
        echo "=== Release files ==="
        ls -la release/ || dir release\

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: release/
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: find artifacts -type f

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*/*
        fail_on_unmatched_files: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 